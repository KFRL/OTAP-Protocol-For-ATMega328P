
zigbiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  000002ba  2**0
                  CONTENTS, READONLY
  2 .bss          00000009  00800100  00800100  000002ba  2**0
                  ALLOC
  3 .debug_aranges 00000028  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b5  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000349  00000000  00000000  00000399  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ba  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ce  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
uint8_t xbeeAddress[8];
uint8_t frameSum;		  // holds sum of all bytes before payload
#endif

/* main program starts here */
int main(void) {
    7c00:	10 92 01 01 	sts	0x0101, r1
	
#ifdef XBEE
	xbeeAddress[0] = 0x00;
	xbeeAddress[1] = 0x00;
    7c04:	10 92 02 01 	sts	0x0102, r1
	xbeeAddress[2] = 0x00;
    7c08:	10 92 03 01 	sts	0x0103, r1
	xbeeAddress[3] = 0x00;
    7c0c:	10 92 04 01 	sts	0x0104, r1
	xbeeAddress[4] = 0x00;
    7c10:	10 92 05 01 	sts	0x0105, r1
	xbeeAddress[5] = 0x00;
    7c14:	10 92 06 01 	sts	0x0106, r1
	xbeeAddress[6] = 0x00;
    7c18:	10 92 07 01 	sts	0x0107, r1
	xbeeAddress[7] = 0x00;
    7c1c:	10 92 08 01 	sts	0x0108, r1
	
	frameSum = 0x0e;
    7c20:	8e e0       	ldi	r24, 0x0E	; 14
    7c22:	80 93 00 01 	sts	0x0100, r24
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7c26:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7c28:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7c2a:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7c2c:	81 ff       	sbrs	r24, 1
    7c2e:	06 d1       	rcall	.+524    	; 0x7e3c <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c30:	85 e0       	ldi	r24, 0x05	; 5
    7c32:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7c36:	82 e0       	ldi	r24, 0x02	; 2
    7c38:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7c3c:	88 e1       	ldi	r24, 0x18	; 24
    7c3e:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7c42:	86 e0       	ldi	r24, 0x06	; 6
    7c44:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c48:	80 e1       	ldi	r24, 0x10	; 16
    7c4a:	80 93 c4 00 	sts	0x00C4, r24

  // Set up watchdog to trigger after 500ms
#ifdef XBEE_TEST
  watchdogConfig(WATCHDOG_OFF);
#else
  watchdogConfig(WATCHDOG_2S);
    7c4e:	8f e0       	ldi	r24, 0x0F	; 15
    7c50:	e6 d0       	rcall	.+460    	; 0x7e1e <watchdogConfig>
#endif
  // For testing purposes
  // watchdogConfig(WATCHDOG_OFF);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c52:	25 9a       	sbi	0x04, 5	; 4
    7c54:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c56:	20 e3       	ldi	r18, 0x30	; 48
    7c58:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7c5a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c5c:	30 93 85 00 	sts	0x0085, r19
    7c60:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7c64:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c66:	b0 9b       	sbis	0x16, 0	; 22
    7c68:	fe cf       	rjmp	.-4      	; 0x7c66 <main+0x66>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c6a:	1d 9a       	sbi	0x03, 5	; 3
	while (1);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c6c:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7c6e:	81 50       	subi	r24, 0x01	; 1
    7c70:	a9 f7       	brne	.-22     	; 0x7c5c <main+0x5c>
#if LED_START_FLASHES > 0
  /* Flash onboard LED to signal entering of bootloader */
  flash_led(LED_START_FLASHES * 2);
#endif

  putpacket(0x04);
    7c72:	84 e0       	ldi	r24, 0x04	; 4
    7c74:	6f d0       	rcall	.+222    	; 0x7d54 <putpacket>
    7c76:	00 e0       	ldi	r16, 0x00	; 0
    7c78:	10 e0       	ldi	r17, 0x00	; 0
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7c7a:	aa 24       	eor	r10, r10
    7c7c:	a3 94       	inc	r10
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7c7e:	b5 e0       	ldi	r27, 0x05	; 5
    7c80:	bb 2e       	mov	r11, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7c82:	a1 e1       	ldi	r26, 0x11	; 17
    7c84:	ca 2e       	mov	r12, r26
	  }
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7c86:	f3 e0       	ldi	r31, 0x03	; 3
    7c88:	df 2e       	mov	r13, r31
  putpacket(0x04);
  
  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getCommand();
    7c8a:	9c d0       	rcall	.+312    	; 0x7dc4 <getCommand>
#ifdef XBEE_TEST
	putpacket(ch);
	ledhalt();

#else
	if(ch == STK_LOAD_ADDRESS) {
    7c8c:	85 35       	cpi	r24, 0x55	; 85
    7c8e:	69 f4       	brne	.+26     	; 0x7caa <main+0xaa>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7c90:	8d d0       	rcall	.+282    	; 0x7dac <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7c92:	e8 2e       	mov	r14, r24
    7c94:	ff 24       	eor	r15, r15
    7c96:	8a d0       	rcall	.+276    	; 0x7dac <getch>
    7c98:	08 2f       	mov	r16, r24
    7c9a:	10 e0       	ldi	r17, 0x00	; 0
    7c9c:	10 2f       	mov	r17, r16
    7c9e:	00 27       	eor	r16, r16
    7ca0:	0e 29       	or	r16, r14
    7ca2:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7ca4:	00 0f       	add	r16, r16
    7ca6:	11 1f       	adc	r17, r17
    7ca8:	49 c0       	rjmp	.+146    	; 0x7d3c <main+0x13c>
      address = newAddress;
      verifySpace();
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7caa:	84 36       	cpi	r24, 0x64	; 100
    7cac:	09 f0       	breq	.+2      	; 0x7cb0 <main+0xb0>
    7cae:	3e c0       	rjmp	.+124    	; 0x7d2c <main+0x12c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

	  getch();			/* getlen() */
    7cb0:	7d d0       	rcall	.+250    	; 0x7dac <getch>
	  length = getch();
    7cb2:	7c d0       	rcall	.+248    	; 0x7dac <getch>
    7cb4:	e8 2e       	mov	r14, r24
	  getch();
    7cb6:	7a d0       	rcall	.+244    	; 0x7dac <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cb8:	80 e7       	ldi	r24, 0x70	; 112
    7cba:	00 30       	cpi	r16, 0x00	; 0
    7cbc:	18 07       	cpc	r17, r24
    7cbe:	18 f4       	brcc	.+6      	; 0x7cc6 <main+0xc6>
    7cc0:	f8 01       	movw	r30, r16
    7cc2:	d7 be       	out	0x37, r13	; 55
    7cc4:	e8 95       	spm
    7cc6:	c0 e0       	ldi	r28, 0x00	; 0
    7cc8:	d3 e0       	ldi	r29, 0x03	; 3

      // While that is going on, read in page contents
      bufPtr = buff;
	  do
	  {
		  ch = getch();
    7cca:	70 d0       	rcall	.+224    	; 0x7dac <getch>
		  *bufPtr++ = ch;
    7ccc:	89 93       	st	Y+, r24
	  }
      while (--length);
    7cce:	ec 16       	cp	r14, r28
    7cd0:	e1 f7       	brne	.-8      	; 0x7cca <main+0xca>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7cd2:	f0 e7       	ldi	r31, 0x70	; 112
    7cd4:	00 30       	cpi	r16, 0x00	; 0
    7cd6:	1f 07       	cpc	r17, r31
    7cd8:	18 f0       	brcs	.+6      	; 0x7ce0 <main+0xe0>
    7cda:	f8 01       	movw	r30, r16
    7cdc:	d7 be       	out	0x37, r13	; 55
    7cde:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7ce0:	a4 d0       	rcall	.+328    	; 0x7e2a <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7ce2:	07 b6       	in	r0, 0x37	; 55
    7ce4:	00 fc       	sbrc	r0, 0
    7ce6:	fd cf       	rjmp	.-6      	; 0x7ce2 <main+0xe2>
    7ce8:	a8 01       	movw	r20, r16
    7cea:	a0 e0       	ldi	r26, 0x00	; 0
    7cec:	b3 e0       	ldi	r27, 0x03	; 3
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7cee:	2c 91       	ld	r18, X
    7cf0:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7cf2:	11 96       	adiw	r26, 0x01	; 1
    7cf4:	8c 91       	ld	r24, X
    7cf6:	11 97       	sbiw	r26, 0x01	; 1
    7cf8:	90 e0       	ldi	r25, 0x00	; 0
    7cfa:	98 2f       	mov	r25, r24
    7cfc:	88 27       	eor	r24, r24
    7cfe:	82 2b       	or	r24, r18
    7d00:	93 2b       	or	r25, r19
uint8_t xbeeAddress[8];
uint8_t frameSum;		  // holds sum of all bytes before payload
#endif

/* main program starts here */
int main(void) {
    7d02:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d04:	fa 01       	movw	r30, r20
    7d06:	0c 01       	movw	r0, r24
    7d08:	a7 be       	out	0x37, r10	; 55
    7d0a:	e8 95       	spm
    7d0c:	11 24       	eor	r1, r1
        addrPtr += 2;
    7d0e:	4e 5f       	subi	r20, 0xFE	; 254
    7d10:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    7d12:	f3 e0       	ldi	r31, 0x03	; 3
    7d14:	a0 38       	cpi	r26, 0x80	; 128
    7d16:	bf 07       	cpc	r27, r31
    7d18:	51 f7       	brne	.-44     	; 0x7cee <main+0xee>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7d1a:	f8 01       	movw	r30, r16
    7d1c:	b7 be       	out	0x37, r11	; 55
    7d1e:	e8 95       	spm
      boot_spm_busy_wait();
    7d20:	07 b6       	in	r0, 0x37	; 55
    7d22:	00 fc       	sbrc	r0, 0
    7d24:	fd cf       	rjmp	.-6      	; 0x7d20 <main+0x120>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7d26:	c7 be       	out	0x37, r12	; 55
    7d28:	e8 95       	spm
    7d2a:	09 c0       	rjmp	.+18     	; 0x7d3e <main+0x13e>
//      while (--length);
//#endif
//#endif
//    }
    /* Get device signature bytes  */
    else if (ch == STK_LEAVE_PROGMODE) {
    7d2c:	81 35       	cpi	r24, 0x51	; 81
    7d2e:	11 f4       	brne	.+4      	; 0x7d34 <main+0x134>
      // Adaboot no-wait mod
	  watchdogConfig(WATCHDOG_64MS);
    7d30:	8a e0       	ldi	r24, 0x0A	; 10
    7d32:	03 c0       	rjmp	.+6      	; 0x7d3a <main+0x13a>
      verifySpace();
    }
    else if (ch == STK_ENTER_PROGMODE)
    7d34:	80 35       	cpi	r24, 0x50	; 80
    7d36:	11 f4       	brne	.+4      	; 0x7d3c <main+0x13c>
    {
    	// Switch off watchdog timer when programming
    	watchdogConfig(WATCHDOG_OFF);
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	71 d0       	rcall	.+226    	; 0x7e1e <watchdogConfig>
    	verifySpace();
    }
    else {
      // This covers the response to other commands
      verifySpace();
    7d3c:	76 d0       	rcall	.+236    	; 0x7e2a <verifySpace>
    }
#endif
    putpacket(STK_OK);
    7d3e:	80 e1       	ldi	r24, 0x10	; 16
    7d40:	09 d0       	rcall	.+18     	; 0x7d54 <putpacket>
    7d42:	a3 cf       	rjmp	.-186    	; 0x7c8a <main+0x8a>

00007d44 <putch>:
  }
}

void putch(char ch) {
    7d44:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7d46:	80 91 c0 00 	lds	r24, 0x00C0
    7d4a:	85 ff       	sbrs	r24, 5
    7d4c:	fc cf       	rjmp	.-8      	; 0x7d46 <putch+0x2>
  UDR0 = ch;
    7d4e:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7d52:	08 95       	ret

00007d54 <putpacket>:

// Creates a data packet and sends it to Xbee
void putpacket(char cha)
{
    7d54:	0f 93       	push	r16
    7d56:	1f 93       	push	r17
    7d58:	cf 93       	push	r28
    7d5a:	df 93       	push	r29
    7d5c:	08 2f       	mov	r16, r24
#ifdef XBEE
	uint8_t checksum = frameSum;
    7d5e:	10 91 00 01 	lds	r17, 0x0100
	checksum += cha;
	checksum = 0xFF - (checksum & 0xFF);
  
	putch(DELIMITER);
    7d62:	8e e7       	ldi	r24, 0x7E	; 126
    7d64:	ef df       	rcall	.-34     	; 0x7d44 <putch>
	putch(LENGTH_UPPER);
    7d66:	80 e0       	ldi	r24, 0x00	; 0
    7d68:	ed df       	rcall	.-38     	; 0x7d44 <putch>
	putch(LENGTH_LOWER);
    7d6a:	8f e0       	ldi	r24, 0x0F	; 15
    7d6c:	eb df       	rcall	.-42     	; 0x7d44 <putch>
	putch(FRAME_TYPE);
    7d6e:	80 e1       	ldi	r24, 0x10	; 16
    7d70:	e9 df       	rcall	.-46     	; 0x7d44 <putch>
	putch(FRAME_ID);
    7d72:	81 e0       	ldi	r24, 0x01	; 1
    7d74:	e7 df       	rcall	.-50     	; 0x7d44 <putch>
    7d76:	c1 e0       	ldi	r28, 0x01	; 1
    7d78:	d1 e0       	ldi	r29, 0x01	; 1

	uint8_t i = 0;
	for(; i < 8; i++)
		putch(xbeeAddress[i]);
    7d7a:	89 91       	ld	r24, Y+
    7d7c:	e3 df       	rcall	.-58     	; 0x7d44 <putch>
	putch(LENGTH_LOWER);
	putch(FRAME_TYPE);
	putch(FRAME_ID);

	uint8_t i = 0;
	for(; i < 8; i++)
    7d7e:	81 e0       	ldi	r24, 0x01	; 1
    7d80:	c9 30       	cpi	r28, 0x09	; 9
    7d82:	d8 07       	cpc	r29, r24
    7d84:	d1 f7       	brne	.-12     	; 0x7d7a <putpacket+0x26>
		putch(xbeeAddress[i]);
   
	putch(XBEE_ADDR_16H);
    7d86:	8f ef       	ldi	r24, 0xFF	; 255
    7d88:	dd df       	rcall	.-70     	; 0x7d44 <putch>
	putch(XBEE_ADDR_16L);
    7d8a:	8e ef       	ldi	r24, 0xFE	; 254
    7d8c:	db df       	rcall	.-74     	; 0x7d44 <putch>
	putch(BROADCAST_RADIUS);
    7d8e:	80 e0       	ldi	r24, 0x00	; 0
    7d90:	d9 df       	rcall	.-78     	; 0x7d44 <putch>
	putch(OPTIONS);
    7d92:	80 e0       	ldi	r24, 0x00	; 0
    7d94:	d7 df       	rcall	.-82     	; 0x7d44 <putch>
#endif

   putch(cha);
    7d96:	80 2f       	mov	r24, r16
    7d98:	d5 df       	rcall	.-86     	; 0x7d44 <putch>
// Creates a data packet and sends it to Xbee
void putpacket(char cha)
{
#ifdef XBEE
	uint8_t checksum = frameSum;
	checksum += cha;
    7d9a:	10 0f       	add	r17, r16
#endif

   putch(cha);

#ifdef XBEE
   putch(checksum);
    7d9c:	81 2f       	mov	r24, r17
    7d9e:	80 95       	com	r24
    7da0:	d1 df       	rcall	.-94     	; 0x7d44 <putch>
#endif
}
    7da2:	df 91       	pop	r29
    7da4:	cf 91       	pop	r28
    7da6:	1f 91       	pop	r17
    7da8:	0f 91       	pop	r16
    7daa:	08 95       	ret

00007dac <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7dac:	80 91 c0 00 	lds	r24, 0x00C0
    7db0:	87 ff       	sbrs	r24, 7
    7db2:	fc cf       	rjmp	.-8      	; 0x7dac <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7db4:	80 91 c0 00 	lds	r24, 0x00C0
    7db8:	84 fd       	sbrc	r24, 4
    7dba:	01 c0       	rjmp	.+2      	; 0x7dbe <getch+0x12>
	while (1);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7dbc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7dbe:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7dc2:	08 95       	ret

00007dc4 <getCommand>:
}
#endif

// A function to handle receiving XBee packets
uint8_t getCommand(void)
{
    7dc4:	1f 93       	push	r17
	uint8_t ch = getch();

#ifdef XBEE
	while (ch != 0x7E)
		ch = getch();
    7dc6:	f2 df       	rcall	.-28     	; 0x7dac <getch>
uint8_t getCommand(void)
{
	uint8_t ch = getch();

#ifdef XBEE
	while (ch != 0x7E)
    7dc8:	8e 37       	cpi	r24, 0x7E	; 126
    7dca:	e9 f7       	brne	.-6      	; 0x7dc6 <getCommand+0x2>
    7dcc:	04 c0       	rjmp	.+8      	; 0x7dd6 <getCommand+0x12>
	uint8_t len = getch();	// store lower byte of length
	ch = getch();				// frame id

	while (ch != 0x90)
	{
		do getch();			// discard all bytes including checksum
    7dce:	ee df       	rcall	.-36     	; 0x7dac <getch>
		while (--len);
    7dd0:	11 50       	subi	r17, 0x01	; 1
    7dd2:	e9 f7       	brne	.-6      	; 0x7dce <getCommand+0xa>

		getch();				// 0x7e
    7dd4:	eb df       	rcall	.-42     	; 0x7dac <getch>
		getch();				// upper length
    7dd6:	ea df       	rcall	.-44     	; 0x7dac <getch>
		len = getch();		// lower length
    7dd8:	e9 df       	rcall	.-46     	; 0x7dac <getch>
    7dda:	18 2f       	mov	r17, r24
		ch = getch();			// frame id
    7ddc:	e7 df       	rcall	.-50     	; 0x7dac <getch>

	getch();					// drop upper byte of length
	uint8_t len = getch();	// store lower byte of length
	ch = getch();				// frame id

	while (ch != 0x90)
    7dde:	80 39       	cpi	r24, 0x90	; 144
    7de0:	b1 f7       	brne	.-20     	; 0x7dce <getCommand+0xa>
    7de2:	10 e0       	ldi	r17, 0x00	; 0
    7de4:	01 c0       	rjmp	.+2      	; 0x7de8 <getCommand+0x24>
	}

	uint8_t i = 0;

	while (i++ < PAYLOAD_POS)
		getch();				// discard all bytes until payload
    7de6:	e2 df       	rcall	.-60     	; 0x7dac <getch>
		ch = getch();			// frame id
	}

	uint8_t i = 0;

	while (i++ < PAYLOAD_POS)
    7de8:	1f 5f       	subi	r17, 0xFF	; 255
    7dea:	1c 30       	cpi	r17, 0x0C	; 12
    7dec:	e1 f7       	brne	.-8      	; 0x7de6 <getCommand+0x22>
		getch();				// discard all bytes until payload

	ch = getch();				// get first byte of payload
    7dee:	de df       	rcall	.-68     	; 0x7dac <getch>
#endif

	return ch;
}
    7df0:	1f 91       	pop	r17
    7df2:	08 95       	ret

00007df4 <sendFailure>:
}

#ifdef XBEE
// A function to ensure delivery status
uint8_t sendFailure()
{
    7df4:	1f 93       	push	r17
	uint8_t ch = getch();
    7df6:	da df       	rcall	.-76     	; 0x7dac <getch>
	getch();  // drop the higher byte of the length
    7df8:	d9 df       	rcall	.-78     	; 0x7dac <getch>
	uint8_t length = getch();
    7dfa:	d8 df       	rcall	.-80     	; 0x7dac <getch>
    7dfc:	18 2f       	mov	r17, r24
	do
	{
		getch();
    7dfe:	d6 df       	rcall	.-84     	; 0x7dac <getch>
	} while (--length != 2);
    7e00:	11 50       	subi	r17, 0x01	; 1
    7e02:	12 30       	cpi	r17, 0x02	; 2
    7e04:	e1 f7       	brne	.-8      	; 0x7dfe <sendFailure+0xa>

	ch = getch();
    7e06:	d2 df       	rcall	.-92     	; 0x7dac <getch>
    7e08:	18 2f       	mov	r17, r24
	getch();
    7e0a:	d0 df       	rcall	.-96     	; 0x7dac <getch>
	getch();
    7e0c:	cf df       	rcall	.-98     	; 0x7dac <getch>

	return ch;
}
    7e0e:	81 2f       	mov	r24, r17
    7e10:	1f 91       	pop	r17
    7e12:	08 95       	ret

00007e14 <ledhalt>:
}
#endif

void ledhalt()
{
	LED_PORT ^= _BV(LED);
    7e14:	85 b1       	in	r24, 0x05	; 5
    7e16:	90 e2       	ldi	r25, 0x20	; 32
    7e18:	89 27       	eor	r24, r25
    7e1a:	85 b9       	out	0x05, r24	; 5
    7e1c:	ff cf       	rjmp	.-2      	; 0x7e1c <ledhalt+0x8>

00007e1e <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e1e:	e0 e6       	ldi	r30, 0x60	; 96
    7e20:	f0 e0       	ldi	r31, 0x00	; 0
    7e22:	98 e1       	ldi	r25, 0x18	; 24
    7e24:	90 83       	st	Z, r25
  WDTCSR = x;
    7e26:	80 83       	st	Z, r24
}
    7e28:	08 95       	ret

00007e2a <verifySpace>:
	do getch(); while (--count);
	verifySpace();
}

void verifySpace() {
	if (getch() != CRC_EOP) {
    7e2a:	c0 df       	rcall	.-128    	; 0x7dac <getch>
    7e2c:	80 32       	cpi	r24, 0x20	; 32
    7e2e:	19 f0       	breq	.+6      	; 0x7e36 <verifySpace+0xc>
		watchdogConfig(WATCHDOG_64MS);    // shorten WD timeout
    7e30:	8a e0       	ldi	r24, 0x0A	; 10
    7e32:	f5 df       	rcall	.-22     	; 0x7e1e <watchdogConfig>
    7e34:	ff cf       	rjmp	.-2      	; 0x7e34 <verifySpace+0xa>
		while (1)			      // and busy-loop so that WD causes
			;				      //  a reset and app start.
	}
#ifdef XBEE
	getch();					  // Discard checksum
    7e36:	ba df       	rcall	.-140    	; 0x7dac <getch>
#endif
	putpacket(STK_INSYNC);
    7e38:	84 e1       	ldi	r24, 0x14	; 20
}
    7e3a:	8c cf       	rjmp	.-232    	; 0x7d54 <putpacket>

00007e3c <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7e3c:	80 e0       	ldi	r24, 0x00	; 0
    7e3e:	ef df       	rcall	.-34     	; 0x7e1e <watchdogConfig>
  __asm__ __volatile__ (
    7e40:	ee 27       	eor	r30, r30
    7e42:	ff 27       	eor	r31, r31
    7e44:	09 94       	ijmp
